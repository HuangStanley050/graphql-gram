scalar Upload

type Query {
  uploads: [File]
  hello: String
  allposts: [FirebaseData]!
  singlePost(postId: String!): Post!
  comments(postId: ID!): [Comment]!
  infinity(data: pageNumber): SingleInfinity!
  ownFiles(data: ID!): [UserOwnFiles]!
}

type Mutation {
  singleUpload(file: Upload!): File!
  multipleUpload(files: [Upload!]!): [File!]!
  createUser(data: userCreate): User!
  login(data: userLogin): AuthData!
  createComment(data: commentCreate): Comment!
  deleteComment(data: commentDelete): Comment!
}

type File {
  id: ID!
  path: String
  download: String!
  fileName: String!
  mimetype: String!
  encoding: String!
}

type User {
  id: ID!
  email: String!
  name: String!
  password: String!
  posts: [Post]
  comments: [String]
}

type SingleInfinity {
  postId: ID!
  fileName: String!
  download: String!
  totalPages: Int!
}

type FirebaseData {
  postId: ID!
  fileName: String!
  download: String!
}

type Comment {
  id: ID!
  userId: ID!
  postId: ID!
  comment: String!
  userName: String!
}

type UserOwnFiles {
  fileName: String!
  download: String!
  poserId: ID!
}

type Post {
  id: ID!
  comments: [String]
  userId: ID!
  fileName: String!
}

type AuthData {
  userId: ID!
  token: String!
}

input pageNumber {
  page: Int!
}

input userLogin {
  email: String!
  password: String!
}

input userCreate {
  email: String!
  name: String!
  password: String!
}

input commentCreate {
  postId: ID!
  comment: String!
  userId: ID!
}

input commentDelete {
  commentId: ID!
}
